"use strict";angular.module("ipublic.ntipa-angular",[]).factory("Account",["$resource",function($resource){return $resource("./app/rest/account",{},{})}]),angular.module("ipublic.ntipa-angular",[]).factory("Ente",["$resource",function($resource){return $resource("/manager/app/rest/account/:action/:enteId/:gruppoId",{},{enties:{method:"GET",isArray:!0,params:{action:"enties"}},organigramma:{method:"GET",isArray:!1,params:{action:"enties",gruppoId:"organigramma"}},group:{method:"GET",isArray:!1,params:{action:"groups"}}})}]),angular.module("ipublic.ntipa-angular",[]).factory("Password",["$resource",function($resource){return $resource("/manager/app/rest/account/change_password",{},{})}]),angular.module("ipublic.ntipa-angular",[]).factory("Sessions",["$resource",function($resource){return $resource("/manager/app/rest/account/sessions/:series",{},{get:{method:"GET",isArray:!0}})}]),angular.module("ipublic.ntipa-angular",[]).factory("AuthenticationSharedService",["$rootScope","$http","authService","Session","Account","$log","localStorageService","Ente","Oauth2Service",function($rootScope,$http,authService,Session,Account,$log,localStorageService,Ente,Oauth2Service){var keyAuthorization="Authorization",keyAccessToken="access.token",keySession="user.session";return{login:function(param){var data="grant_type=password&client_id=box&scope=read&username="+param.username+"&password="+param.password;$log.info("data:"+data),Oauth2Service.clear(),$http.post("/authserver/oauth/token",data,{headers:{"Content-Type":"application/x-www-form-urlencoded"},ignoreAuthModule:"ignoreAuthModule"}).success(function(data){$rootScope.authenticationError=!1,$rootScope.accessToken=data.access_token;var token="Bearer "+$rootScope.accessToken;$log.info("Authorization:"+token),$http.defaults.headers.common[keyAuthorization]=token,localStorageService.add(keyAuthorization,token),localStorageService.add(keyAccessToken,$rootScope.accessToken),Oauth2Service.loadAccount()}).error(function(){$rootScope.authenticationError=!0,Session.invalidate()})},changeRoles:function(enteId,gruppoId){$log.info("enteId:"+enteId),$log.info("gruppoId:"+gruppoId);var data=$rootScope.accessToken+"/"+enteId+"/"+gruppoId;$http.get("/authserver/oauth/users/change/roles/"+data).success(function(){Oauth2Service.loadAccount()}).error(function(){$rootScope.authenticationError=!0})},valid:function(authorizedRoles){$log.info("on valid authorizedRoles"+authorizedRoles),$http.get("/box/protected/transparent.gif",{ignoreAuthModule:"ignoreAuthModule"}).success(function(){Session.login&&Account.get(function(data){Session.create(data.login,data.firstName,data.lastName,data.email,data.roles),$rootScope.account=data,$rootScope.isAuthorized(authorizedRoles)||(event.preventDefault(),$rootScope.$broadcast("event:auth-notAuthorized")),$rootScope.authenticated=!0}),$rootScope.authenticated=!!Session.login}).error(function(){$rootScope.authenticated=!1})},isAuthorized:function(authorizedRoles){if(!angular.isArray(authorizedRoles)){if("*"==authorizedRoles)return!0;authorizedRoles=[authorizedRoles]}var isAuthorized=!1;return angular.forEach(authorizedRoles,function(authorizedRole){var authorized=!angular.isUndefined(Session.userRoles)&&!!Session.login&&!angular.isUndefined(Session.userRoles)&&-1!==Session.userRoles.indexOf(authorizedRole);(authorized||"*"==authorizedRole)&&(isAuthorized=!0)}),isAuthorized},logout:function(){$rootScope.authenticationError=!1,$rootScope.authenticated=!1,$rootScope.account=null,$rootScope.user=null,localStorageService.remove(keyAuthorization),localStorageService.remove(keyAccessToken),localStorageService.remove(keySession),delete $http.defaults.headers.common[keyAuthorization],$rootScope.token="",$rootScope.accessToken="",$http.get("/box/app/logout"),Oauth2Service.clear(),authService.loginCancelled()},loadLocalToken:function(){Oauth2Service.loadLocalToken()}}}]);